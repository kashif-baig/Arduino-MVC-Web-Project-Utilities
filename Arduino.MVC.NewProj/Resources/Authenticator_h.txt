#ifndef AUTHENTICATOR_H
#define AUTHENTICATOR_H

#define USER_MAX_COUNT           1
#define USER_NAME_MAXLEN        9
#define USER_PASS_MAXLEN        9
#define AUTH_TICKET_MAXLEN      16
#define AUTH_TICKET_EXPIRY_MS   300000

class Authenticator;

// Represents a single user profile.
class UserInfo
{
public:
    UserInfo()
    {
        clear();
    };

    void checkLastValidatedForExpiry()
    {
        if ((strlen(authTicket) > 0) && (millis() - lastValidated) > (AUTH_TICKET_EXPIRY_MS))
        {
            clear();
        }
    }

    void clear()
    {
        authTicket[0] = 0;
        lastValidated = 0;
    }

protected:
    friend class Authenticator;

    char userName[USER_NAME_MAXLEN];
    char password[USER_PASS_MAXLEN];
    char authTicket[AUTH_TICKET_MAXLEN];
    uint32_t lastValidated;
};


// User authentication class.
class Authenticator
{
public:
    Authenticator()
    {
        // Set username and password for each UserInfo here.
        // Should be possible to load usernames and passwords from EEPROM or SD card.
        _count = 0;

        strcpy_P(userInfoArray[_count].userName, PSTR("admin"));
        strcpy_P(userInfoArray[_count++].password, PSTR("password"));

        //strcpy_P(userInfoArray[_count].userName, PSTR("kashif"));
        //strcpy_P(userInfoArray[_count++].password, PSTR("none"));

        // Set additional username and passwords here. 
    }

    // Authenticates user and if valid, returns a new ticket that is unique to the user. Otherwise, returns NULL.
    const char *authenticate(const char *user, const char *pass)
    {
        // Iterate over each UserInfo object.
        for (uint8_t i = 0; i < count(); i++)
        {
            if (strcasecmp(user, userInfoArray[i].userName) == 0 && strcmp(pass, userInfoArray[i].password) == 0)
            {
                generateTicket(&userInfoArray[i]);
                userInfoArray[i].lastValidated = millis();
                return userInfoArray[i].authTicket;
            }
        }
        return NULL;
    }

    // Finds user associated with valid ticket, and updates their lastValidated time.
    // Returns NULL if user cannot be found.
    const char *getAuthenticatedUser(const char *ticket)
    {
        // Iterate over each UserInfo object.
        for (uint8_t i = 0; i < count(); i++)
        {
            if (strcmp(userInfoArray[i].authTicket, ticket) == 0)
            {
                userInfoArray[i].lastValidated = millis();
                return userInfoArray[i].userName;
            }
        }
        return NULL;
    }

    // Check if user login session(s) has/have expired.
    void checkSessionExpiry()
    {
        // Iterate over each UserInfo object.
        for (uint8_t i = 0; i < count(); i++)
        {
            userInfoArray[i].checkLastValidatedForExpiry();
        }
    }

    void invalidateUserSession (const char *user)
    {
        // Iterate over each UserInfo object.
        for (uint8_t i = 0; i < count(); i++)
        {
            if (strcasecmp(user, userInfoArray[i].userName) == 0)
            {
                userInfoArray[i].clear();
                return;
            }
        }
    }

    uint8_t count() const
    {
        return _count;
    }

private:
    // To support multiple users, an array of UserInfo objects.
    UserInfo userInfoArray[USER_MAX_COUNT];
    uint8_t _count;

    // Generates random alpha-numeric string.
    void generateTicket(UserInfo *userInfo)
    {
        randomSeed(millis());

        for (uint8_t i = 0; i < AUTH_TICKET_MAXLEN - 1; i++)
        {
            int8_t rndNum = random(61);

            char chr = 0;

            if (rndNum >= 0 && rndNum <= 25)
            {
                chr = rndNum + 65;
            }
            else if (rndNum >= 26 && rndNum <= 51)
            {
                chr = -26 + rndNum + 97;
            }
            else
            {
                chr = -52 + rndNum + 48;
            }
            userInfo->authTicket[i] = chr;
            userInfo->authTicket[i + 1] = 0;
        }
    };
};

#endif
